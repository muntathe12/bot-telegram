"""
ููู ุงุฎุชุจุงุฑ ุงูุจูุช ูุญููุงู
"""
import asyncio
import os
from download import downloader
from utils import is_valid_url, extract_urls_from_text

async def test_video_info():
    """
    ุงุฎุชุจุงุฑ ุงูุญุตูู ุนูู ูุนูููุงุช ุงูููุฏูู
    """
    test_urls = [
        "https://www.youtube.com/watch?v=dQw4w9WgXcQ",  # YouTube
        "https://youtu.be/dQw4w9WgXcQ",  # YouTube Short URL
    ]
    
    for url in test_urls:
        print(f"\n๐ ุงุฎุชุจุงุฑ ุงูุฑุงุจุท: {url}")
        
        if not is_valid_url(url):
            print("โ ุงูุฑุงุจุท ุบูุฑ ุตุญูุญ")
            continue
        
        try:
            info = await downloader.get_video_info(url)
            if info:
                print(f"โ ุงูุนููุงู: {info['title']}")
                print(f"๐บ ุงูููุตุฉ: {info['platform']}")
                print(f"๐ค ุงูููุดุฆ: {info['uploader']}")
                print(f"โฑ๏ธ ุงููุฏุฉ: {info['duration']} ุซุงููุฉ")
            else:
                print("โ ูุดู ูู ุงูุญุตูู ุนูู ูุนูููุงุช ุงูููุฏูู")
        except Exception as e:
            print(f"โ ุฎุทุฃ: {str(e)}")

async def test_download():
    """
    ุงุฎุชุจุงุฑ ุชุญููู ููุฏูู (ุงุฎุชูุงุฑู - ูุฏ ูุณุชุบุฑู ููุชุงู)
    """
    test_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    
    print(f"\n๐ฅ ุงุฎุชุจุงุฑ ุชุญููู: {test_url}")
    
    try:
        result = await downloader.download_and_get_info(test_url)
        if result:
            print(f"โ ุชู ุงูุชุญููู ุจูุฌุงุญ!")
            print(f"๐ ุงููุณุงุฑ: {result['file_path']}")
            print(f"๐ ุงูุญุฌู: {result['file_size']} ุจุงูุช")
            
            # ุญุฐู ุงูููู ุงููุคูุช
            downloader.cleanup_file(result['file_path'])
            print("๐๏ธ ุชู ุญุฐู ุงูููู ุงููุคูุช")
        else:
            print("โ ูุดู ูู ุงูุชุญููู")
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุญููู: {str(e)}")

def test_utils():
    """
    ุงุฎุชุจุงุฑ ุงูุฃุฏูุงุช ุงููุณุงุนุฏุฉ
    """
    print("\n๐งช ุงุฎุชุจุงุฑ ุงูุฃุฏูุงุช ุงููุณุงุนุฏุฉ:")
    
    # ุงุฎุชุจุงุฑ ุงุณุชุฎุฑุงุฌ ุงูุฑูุงุจุท
    test_text = "ุดุงูุฏ ูุฐุง ุงูููุฏูู https://youtube.com/watch?v=123 ููุฐุง ุฃูุถุงู https://tiktok.com/@user/video/456"
    urls = extract_urls_from_text(test_text)
    print(f"๐ ุงููุต: {test_text}")
    print(f"๐ ุงูุฑูุงุจุท ุงููุณุชุฎุฑุฌุฉ: {urls}")
    
    # ุงุฎุชุจุงุฑ ุงูุชุญูู ูู ุงูุฑูุงุจุท
    test_urls = [
        "https://youtube.com/watch?v=123",
        "invalid-url",
        "https://tiktok.com/@user/video/456"
    ]
    
    for url in test_urls:
        valid = is_valid_url(url)
        print(f"๐ {url} -> {'โ ุตุญูุญ' if valid else 'โ ุบูุฑ ุตุญูุญ'}")

async def main():
    """
    ุชุดุบูู ุฌููุน ุงูุงุฎุชุจุงุฑุงุช
    """
    print("๐ ุจุฏุก ุงุฎุชุจุงุฑ ุงูุจูุช...")
    
    # ุงุฎุชุจุงุฑ ุงูุฃุฏูุงุช ุงููุณุงุนุฏุฉ
    test_utils()
    
    # ุงุฎุชุจุงุฑ ูุนูููุงุช ุงูููุฏูู
    await test_video_info()
    
    # ุงุฎุชุจุงุฑ ุงูุชุญููู (ุงุฎุชูุงุฑู)
    download_test = input("\nโ ูู ุชุฑูุฏ ุงุฎุชุจุงุฑ ุงูุชุญูููุ (ูุฏ ูุณุชุบุฑู ููุชุงู) [y/N]: ")
    if download_test.lower() in ['y', 'yes', 'ูุนู']:
        await test_download()
    
    print("\nโ ุงูุชูู ุงูุงุฎุชุจุงุฑ!")

if __name__ == "__main__":
    asyncio.run(main())